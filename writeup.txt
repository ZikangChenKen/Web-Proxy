COMP 321 Project 6: Web Proxy

<Yuqi Chen: yc138, Zikang Chen: zc45>

Slip days: 3 

---(Do not write lines of text that exceed the width of this line.)------------

DESIGN DISCUSSION

Please answer the following questions about the design of your proxy.

1. Describe the steps taken by your proxy to service a single HTTP
   transaction from beginning to end.  (10-14 sentences)

   In main, the client sends a request to the proxy server specifying
the target server and resources to be accessed. After checking the
validity of the request, the proxy server will make a connection between
the client and itself. Then, it calls Accept() to enable data to be
transferred. We have an infinite while loop to ensure the proxy server
will keep accepting the request sequentially (In parallel mode, we will
folk children threads to handle requests). Also, it will open the
logging file to track all processes of requests and close it when
everything has been done.
   In doit, the function retrieves the file descriptor for the
connection from the argument passed to it. It reads the request line
and headers from the client using rio_readlineb. If the request line
cannot be parsed, it returns a 400 Bad Request error. If the HTTP
version is not 1.0 or 1.1, it returns a 400 Bad Request error.
If the HTTP method is not GET, it returns a 501 Not Implemented
error. Besides, it calls parse_uri() to extract the hostname, port,
and path name. Then, the proxy server will strip the respond header
(“Connection”, “Keep-Alive”, and/or “Proxy-Connection”) which
indicates that it would like to use persistent connections.
Moreover, if the version is HTTP/1.1, we need to append
"Connection: close\r\n" to the server buffer. Then, it utilizes RIO
to read and write the request message to the target server. Finally,
it will record the process in a logging proxy file and close the
connection.


2. Did you modify the first line of the request message?  If so, how?
   (1-3 sentences)

   Yes. When a browser is directly connected to an end server, it
only sends the path part of the URI. Thus, we need to rewrite the start
line that it sends to the end server to include just the path. We
realize this feature by snprintf(first_hdr, hdr_len, "%s %s %s\r\n",
method, path_name, http); in line 252.


3. Did you add/remove/modify any request headers?  If so, how?
(1-3 sentences)

	Yes. It strips “Connection”, “Keep-Alive”, and “Proxy-Connection”
headers from the client's request message by the condition checking
at line 281-301
	
	Also, it appends "Connection: close\r\n" to the server buffer if
the version is HTTP/1.1 by if (strstr(http,"HTTP/1.1")) {
		printf("Connection: close\n");
	} in line 307-310



4. How did you forward the response message?  (2-4 sentences)

   After connecting to the server and sending the modified request,
the function creates a buffer to store the server's response. It then
reads the response from the server using rio_readn() and writes the
response back to the client using rio_writen(). Once the entire response
has been sent to the client, the function logs the request and response
data to a log file using fwrite() and fflush(). 


6. How many threads did your proxy use to implement concurrency?  Explain how
   you chose this number.  (3-6 sentences)

	We have 10 threads. We chose this number because
we can handle more threads at the same while. Also, tt won’t cause
context-switching overhead and consumetoo many system resources, nor
too few threads can lead to lower performance due to a lack of
parallelism.

7. How did you write to the access log file?  (1-2 sentences)

   In doit, after sending the response back to the client, a log entry
is createdby calling the create_log_entry(). It takes the client
address, the requested URI, and the size of the response as input
arguments and returns a string containing the log entry.


8. How do you ensure atomicity when writing to the access log file?
   (1-2 sentences)
	For each child process, we have set a lock to guarantee that there
is no data race that multiple child processes trying to modify the
access log file at the same time. If it is locked, other child processes
have to wait until it turns to be unlocked.

9. When did you open/close the access log file?  (2 sentences)
	When we state executing the proxy server (at the beginning of main()),
 we open the access log file. When we quit the proxy server (at the end
 of main()), we close the access log file.

